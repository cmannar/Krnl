/*
Candace Mannar
Assignment 3, Part 1

NOtes: mm_struct is the memory descriptor data structure and used to represent a process's address space. And Included in a process's task_struct is mm (as a field). task->mm is the process's memory descriptor. WIthin the memory descriptor, is a set of Virtual Memory Areas (VMA's) of type vm_area_struct and all VMA's together form a process's virtual address space. A process's VMA's are stored in its memory descriptor (in mmap field) task->mm->mmap. TO calculate size of a virtual address space, you need to sum the sizes of individual VMA's.
*/
#include <linux/kernel.h>
#include <linux/sched.h>
#include <linux/mm.h>
#include <linux/mm_types.h> // mm_struct is defined here 
#include <linux/fs.h>
#include <asm/page.h>
#include <asm/mman.h>

asmlinkage int sys_vma_stats(int pid){ //space btw pointers?? struct*this_mem or struct *this_mem ?  //the return type for this function can be an int, no need for long since you are just returning a 1

	int num_vmas;
	unsigned long prot=0;
	unsigned long start=0;
	int count=0;
	int total_size=0;
	char *name;

	struct task_struct *this_task;
	struct mm_struct *this_mem;
	struct vm_area_struct *all_vmas;
	struct vm_area_struct this_vma; //pointer like *this_vma ?? //this is fine as is, no need for pointer (David)

	this_task=find_task_by_vpid(pid);
	this_mem=this_task->active_mm;
	all_vmas=this_mem->mmap;
	num_vmas=this_mem->map_count;
	this_vma= *all_vmas;
	start=this_vma.vm_start; //period btw vma and vm??

	printk("\nThere are %i virtual memory areas (VMA's).\n", num_vmas);
	for(this_vma = *all_vmas; count < num_vmas; count++){
		printk("-- -- -- -- --\n");
		printk("Information for VMA #%i:\n", count+1);

		printk("--> Start Address: 0x%lx\n", this_vma.vm_start);
		printk("--> End Address: 0x%lx\n", this_vma.vm_end);
		printk("--> Total Size (End - Start): %lu\n", this_vma.vm_end - this_vma.vm_start);
		
		prot=this_vma.vm_flags;
		printk("--> Access Permissions:\n");
		printk("	-> Read Permission: %s \n", prot&PROT_READ?"yes":"no");
		printk("	-> Write Permission: %s \n", prot&PROT_WRITE?"yes":"no");
		printk("	-> Execute Permission: %s \n", prot&PROT_EXEC?"yes":"no");

		if(this_vma.vm_file != NULL){
			name = d_path(&this_vma.vm_file->f_path, (char*)__get_free_page(GFP_TEMPORARY), PAGE_SIZE);
			printk("--> Mapped File: %s\n", name);
		}// end of if loop 
		
		total_size += (this_vma.vm_end - this_vma.vm_start);
		if (count != num_vmas-1){
			this_vma = *(this_vma.vm_next);
		}// end of if loop 
	} // end of for loop 
	
	printk("\nThe Total VMA space size of all VMA's: %i\n", total_size);
	return 1;
} // end of main
